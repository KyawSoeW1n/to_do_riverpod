// Mocks generated by Mockito 5.3.2 from annotations
// in to_do/test/mock/domain/repo/task_repo_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:to_do/domain/model/task.dart' as _i5;
import 'package:to_do/domain/model/task_list.dart' as _i2;
import 'package:to_do/domain/repo/task_repo.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskList_0 extends _i1.SmartFake implements _i2.TaskList {
  _FakeTaskList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepo extends _i1.Mock implements _i3.TaskRepo {
  @override
  _i4.Future<_i2.TaskList> getTaskList() => (super.noSuchMethod(
        Invocation.method(
          #getTaskList,
          [],
        ),
        returnValue: _i4.Future<_i2.TaskList>.value(_FakeTaskList_0(
          this,
          Invocation.method(
            #getTaskList,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.TaskList>.value(_FakeTaskList_0(
          this,
          Invocation.method(
            #getTaskList,
            [],
          ),
        )),
      ) as _i4.Future<_i2.TaskList>);
  @override
  _i4.Future<List<_i5.Task>> createTask(List<_i5.Task>? taskList) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [taskList],
        ),
        returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
      ) as _i4.Future<List<_i5.Task>>);
  @override
  _i4.Future<List<_i5.Task>> updateTask(List<_i5.Task>? taskList) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [taskList],
        ),
        returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
      ) as _i4.Future<List<_i5.Task>>);
}
